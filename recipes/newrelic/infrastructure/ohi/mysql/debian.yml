# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: mysql-open-source-integration
displayName: MySQL Open Source Integration
description: New Relic install recipe for default MySQL Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-mysql

dependencies:
  - infrastructure-agent-installer

observabilityPacks:
  - name: MySQL / MariaDB
    level: NEWRELIC

installTargets:
  - type: host
    os: linux
    platform: "debian"
  - type: host
    os: linux
    platform: "ubuntu"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - mysql

# Examine Infrastructure events for correlated data
processMatch:
  - mysqld

# Matches partial list of the Log forwarding parameters
# https://docs.newrelic.com/docs/logs/enable-log-management-new-relic/enable-log-monitoring-new-relic/forward-your-logs-using-infrastructure-agent#parameters
logMatch:
  - name: mysql
    file: /var/log/mysql/mysqld.log
  - name: mysql-error
    file: /var/log/mysql/error.log
    attributes:
      logtype: mysql-error

# NRQL the newrelic-cli will use to validate the agent/integration this recipe
# installed is successfully sending data to New Relic
validationNrql: "SELECT count(*) from MysqlSample where hostname like '{{.HOSTNAME}}%' FACET entityGuid SINCE 10 minutes ago"

successLinkConfig:
  type: EXPLORER

preInstall:
  info: |2
      To capture data from the MySQL integration, we need to create a new MySql user with specific permissions (REPLICATION, SELECT).
      The installation will create a strong randomly generated password for that new user.
      This installation may prompt for your MySql root user password in order to create this new user.
      More information regarding the prerequisites can be found at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#req

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: input_assert
          vars:
            MAX_RETRIES: 3
        - task: restart

    assert_infra:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/new-relic-guided-installation-overview" >&2
            exit 1
          fi

    input_assert:
      cmds:
        - |
          # Check Env Vars
          NEW_RELIC_ASSUME_YES="{{.NEW_RELIC_ASSUME_YES}}"
          NR_CLI_DB_PORT="{{.NR_CLI_DB_PORT}}"
          NR_CLI_DB_USERNAME="{{.NR_CLI_DB_USERNAME}}"
          NR_CLI_DB_PASSWORD="{{.NR_CLI_DB_PASSWORD}}"
          NR_CLI_DB_ROOT_PASSWORD="{{.NR_CLI_DB_ROOT_PASSWORD}}"

          # Set Defaults
          # only localhost is supported
          NR_CLI_DB_HOSTNAME="localhost"
          NR_CLI_DB_PORT=${NR_CLI_DB_PORT:-3306}
          NR_CLI_DB_USERNAME=${NR_CLI_DB_USERNAME:-newrelic}
          if [ "$NR_CLI_DB_PASSWORD" == "" ]; then
            NR_CLI_DB_PASSWORD=$(echo -n $(date +%s | sha256sum | base64 | head -c 16); echo "%")
          fi

          # Get and validate Port
          if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
            TRIES=0
            while [ $TRIES -lt {{.MAX_RETRIES}} ]; do
              printf "MySQL port (default: 3306): "
              read -r NR_CLI_DB_PORT
              NR_CLI_DB_PORT=${NR_CLI_DB_PORT:-3306}
              ((TRIES++))
              CAN_CONNECT=$(curl $NR_CLI_DB_HOSTNAME:$NR_CLI_DB_PORT 2>&1 1>/dev/null -s -S | awk -F'[()]' '{print $2}')
              CAN_CONNECT=${CAN_CONNECT:-0}

              if [ $CAN_CONNECT == "6" ]; then
                printf "\n[Error]: Provided host ($NR_CLI_DB_HOSTNAME) cannot be reached.\nThis installation must be run on the host running MySql\nSee https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#config for more info.\n" >&2
                exit 6;
              elif [ $CAN_CONNECT == "7" ]; then
                printf "\n[Error]: Connections to the port ($NR_CLI_DB_PORT) are being refused.\nSee https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#config for more info.\n" >&2
                if [ ! $TRIES -lt {{.MAX_RETRIES}} ]; then exit 7; fi
                echo "Please try again"
              else
                break
              fi
            done
          fi

          # Attempt to create required user
          SQL_CHECK_AUTH=$(echo "SELECT USER FROM mysql.user where USER in ('"$NR_CLI_DB_USERNAME"')")
          MYSQL_ROOT_PASSWORD=$(eval sudo mysql -u root --port $NR_CLI_DB_PORT -ne \"$SQL_CHECK_AUTH\" 2>&1 | grep "ERROR" | wc -l)
          if [ $MYSQL_ROOT_PASSWORD -gt 0 ] ; then
            if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
              # Need to prompt for MySql root password to create the user
              while [ $TRIES -lt {{.MAX_RETRIES}} ]; do
                printf "Enter your MySql DB root password: "
                read -r NR_CLI_DB_ROOT_PASSWORD
                stty echo
                ((TRIES++))
                if [ "$NR_CLI_DB_ROOT_PASSWORD" == "" ]; then
                  printf "\n[Error]: Please provide a non empty MySql root password to create the newrelic user.\n" >&2
                  if [ $TRIES -lt {{.MAX_RETRIES}} ]; then 
                    echo "Please try again"
                  fi
                  continue
                fi

                MYSQL_ROOT_PASSWORD=$(eval sudo mysql -u root --port $NR_CLI_DB_PORT -p$NR_CLI_DB_ROOT_PASSWORD -ne \"$SQL_CHECK_AUTH\" 2>&1 | grep "ERROR" | wc -l)
                if [ $MYSQL_ROOT_PASSWORD -gt 0 ] ; then
                  printf "\n[Error]: Please provide a valid MySql root password to create the newrelic user.\n" >&2
                  if [ $TRIES -lt {{.MAX_RETRIES}} ]; then 
                    echo "Please try again"
                  fi
                  continue
                else
                  break
                fi
              done
            else
              # non-interactive mode, need a valid root password
              printf "\n[Error]: This installation requires the MySql DB root password to create the newrelic user. Please run this installation in interactive mode.\n" >&2
              exit 131
            fi
          fi

          if [ $MYSQL_ROOT_PASSWORD -gt 0 ] && [ "$NR_CLI_DB_ROOT_PASSWORD" == "" ]; then
            printf "\n[Error]: This installation requires the MySql DB root password to create the newrelic user. Please re-run this installation and enter a valid MySql root password when prompted.\n" >&2
            exit 131
          fi

          # Delete any previous newrelic user (continue if any error)
          SQL=$(echo "DROP USER '"$NR_CLI_DB_USERNAME"'@'localhost';")
          if [ "$NR_CLI_DB_ROOT_PASSWORD" == "" ] ; then
            EXEC_OUTPUT=$(eval sudo mysql -u root --port $NR_CLI_DB_PORT -ne \"$SQL\" 2>&1)
          else
            EXEC_OUTPUT=$(eval sudo mysql -u root --port "$NR_CLI_DB_PORT" -p"$NR_CLI_DB_ROOT_PASSWORD" -ne \"$SQL\" 2>&1)
          fi

          # Create new user with needed permissions
          SQL=$(echo "CREATE USER '"$NR_CLI_DB_USERNAME"'@'localhost' IDENTIFIED BY '"$NR_CLI_DB_PASSWORD"'; GRANT REPLICATION CLIENT ON *.* TO '"$NR_CLI_DB_USERNAME"'@'localhost' WITH MAX_USER_CONNECTIONS 5; GRANT SELECT ON *.* TO '"$NR_CLI_DB_USERNAME"'@'localhost' WITH MAX_USER_CONNECTIONS 5;")
          if [ "$NR_CLI_DB_ROOT_PASSWORD" == "" ] ; then
            EXEC_OUTPUT=$(eval sudo mysql -u root --port $NR_CLI_DB_PORT -ne \"$SQL\" 2>&1)
          else
            EXEC_OUTPUT=$(eval sudo mysql -u root --port "$NR_CLI_DB_PORT" -p"$NR_CLI_DB_ROOT_PASSWORD" -ne \"$SQL\" 2>&1)
          fi
          SQL_OUTPUT_ERROR=$(echo -n $EXEC_OUTPUT | grep "ERROR" | wc -l)
          if [ $SQL_OUTPUT_ERROR -gt 0 ] ; then
            printf "\n[Error]: This installation failed to create the required newrelic user, detail:"$EXEC_OUTPUT". Please follow the manual installation steps documented at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration/\n" >&2
            exit 41
          fi

          # Install the integration
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
          # Get latest definitions and skip any failure because of deprecation
          sudo apt-get -o Acquire::Check-Valid-Until=false update -yq
          sudo apt-get install nri-mysql -y
          if [ -f /etc/newrelic-infra/integrations.d/mysql-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/mysql-config.yml;
          fi

          sudo cp /etc/newrelic-infra/integrations.d/mysql-config.yml.sample /etc/newrelic-infra/integrations.d/mysql-config.yml;
          sudo tee /etc/newrelic-infra/integrations.d/mysql-config.yml > /dev/null <<EOT
          integration_name: com.newrelic.mysql

          instances:
            - name: mysql-status
              command: status
              arguments:
                hostname: $NR_CLI_DB_HOSTNAME
                port: $NR_CLI_DB_PORT
                username: $NR_CLI_DB_USERNAME
                password: $NR_CLI_DB_PASSWORD
                database:
                extended_metrics: true
                extended_innodb_metrics: true
                extended_myisam_metrics: true
                remote_monitoring: true
          EOT

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            sudo systemctl restart newrelic-infra
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              sudo initctl restart newrelic-infra
            else
              sudo /etc/init.d/newrelic-infra restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

postInstall:
  info: |2
      ⚙️  The MySQL configuration file can be found in /etc/newrelic-infra/integrations.d/mysql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#config
