# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: mssql-server-integration-installer
displayName: Microsoft/SqlServer Integration
description: New Relic install recipe for the Microsoft SqlServer Integration
repository: https://github.com/newrelic/nri-mssql

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: windows

keywords:
  - Integration
  - SqlServer
  - Windows

processMatch:
  - sqlservr.exe

validationNrql: "SELECT count(*) from MssqlInstanceSample where hostname like '{{.HOSTNAME}}' FACET entityGuid SINCE 10 minutes ago"

preInstall:
  requireAtDiscovery: |
      powershell -command '
      $instances = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server').InstalledInstances
      If ($instances.Length -eq 0) {
        # No SQL Server instances locally
        Exit 1
      }

      $NR_CLI_DB_HOSTNAME=   "{{.NR_CLI_DB_HOSTNAME}}"
      if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_HOSTNAME)) {$NR_CLI_DB_HOSTNAME = {{.HOSTNAME}}}

      $NR_CLI_DB_PORT = "{{.NR_CLI_DB_PORT}}"
      if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_PORT)) {$NR_CLI_DB_PORT = "1433"}

      # Loop on each instance names to see if we can connect
      foreach ($instance in $instances) {
        $connection = "${NR_CLI_DB_HOSTNAME}\${instance},${NR_CLI_DB_PORT}"
        $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
        If ($name.Length -ge 3) {
          $actualName = $name[2]; $actualName = $actualName.Trim();
          If ($actualName -eq $instance) {
            # Found at least 1 instance connecting on default port
            Exit 0
          }
        }

        $connection = "${NR_CLI_DB_HOSTNAME}\${instance}"
        $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
        If ($name.Length -ge 3) {
          $actualName = $name[2]
          $actualName = $name[2]; $actualName = $actualName.Trim();
          If ($actualName -eq $instance) {
            # Found at least 1 instance connecting
            Exit 0
          }
        }

      }
      Exit 2
  info: |
      To capture data from the Microsoft SqlServer integration, we need to create a new SqlServer user with specific permissions (CONNECT, VIEW SERVER STATE, READ).
      The installation will create a strong randomly generated password for that new user.
      More information regarding the prerequisites can be found at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration#about

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: input_install


    assert_infra:
      cmds:
        - |
          powershell -command '
          $output = Get-Service "newrelic-infra"
          if ( -not ($output -like "*newrelic-infra*") ) {
            Write-Host -ForegroundColor Red "The newrelic-infra agent service is not installed on the host, but is required to install this integration. Please install the newrelic infrastructure agent."
            Exit 1
          }
          '

    input_install:
      cmds:
        - |
          powershell -command '
          $TRIES=0
          $MAX_RETRIES=3

          # Check Env Vars
          $NEW_RELIC_ASSUME_YES= "{{.NEW_RELIC_ASSUME_YES}}"

          $NR_CLI_DB_HOSTNAME=   "{{.NR_CLI_DB_HOSTNAME}}"
          if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_HOSTNAME)) {$NR_CLI_DB_HOSTNAME = "{{.HOSTNAME}}"}

          $NR_CLI_DB_PORT = "{{.NR_CLI_DB_PORT}}"
          if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_PORT)) {$NR_CLI_DB_PORT = "1433"}

          $NR_CLI_DB_USERNAME=   "{{.NR_CLI_DB_USERNAME}}"
          if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_USERNAME)) {$NR_CLI_DB_USERNAME = "newrelic"}

          $NR_CLI_DB_PASSWORD=   "{{.NR_CLI_DB_PASSWORD}}"
          if ([string]::IsNullOrWhiteSpace($NR_CLI_DB_PASSWORD)) {
            Add-Type -AssemblyName System.Web;
            $NR_CLI_DB_PASSWORD = [System.Web.Security.Membership]::GeneratePassword(20,2);
          }

          $OhiConfig = "C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml"; 
          # Remove any previous config
          if (Test-Path $OhiConfig) { Remove-Item $OhiConfig };
          Add-Content -Path $OhiConfig -Value @"
          Add-Content -Path "C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml" -Value @"
          integration_name`:` com.newrelic.mssql
          instances`:`
          "@ -Force | Out-Null;

          # Write config function
          function Write-OhiConfig {
            param (
              [Parameter(Mandatory)]
              [string]$InstanceName
            )
            param (
              [Parameter(Optional)]
              [string]$Port
            )

            Add-Content -Path $OhiConfig -Value @"
              - name`:` mssql-server-${InstanceName}
                command`:` all_data
                arguments`:`
                  hostname`:` ${NR_CLI_DB_HOSTNAME}
                  username`:` ${NR_CLI_DB_USERNAME}
                  password`:` ${NR_CLI_DB_PASSWORD}
            "@ -Force | Out-Null;

            if ([string]::IsNullOrWhiteSpace($Port)) {
              Add-Content -Path $OhiConfig -Value @"
                  instance`:` ${InstanceName}
              "@ -Force | Out-Null;
            } else {
              Add-Content -Path $OhiConfig -Value @"
                  port`:` ${Port}
              "@ -Force | Out-Null;
            }
          }

          # Create SQL user function
          function Create-SqlUser {
            param (
              [Parameter(Mandatory)]
              [string]$InstanceName
            )
            param (
              [Parameter(Optional)]
              [string]$Port
            )

            if ([string]::IsNullOrWhiteSpace($Port)) {
              $connection = "${NR_CLI_DB_HOSTNAME}\${instance}"
            } else {
              $connection = "${NR_CLI_DB_HOSTNAME}\${instance},${Port}"
            }
            $SqlOutput=(sqlcmd -S $connection -Q @"
            IF EXISTS(select top 1 name from sys.syslogins where name = '${NR_CLI_DB_USERNAME}')
            BEGIN
              DROP LOGIN ${NR_CLI_DB_USERNAME}
            END

            CREATE LOGIN ${NR_CLI_DB_USERNAME} WITH PASSWORD = '${NR_CLI_DB_PASSWORD}';
            GRANT CONNECT SQL TO ${NR_CLI_DB_USERNAME};
            GRANT VIEW SERVER STATE TO ${NR_CLI_DB_USERNAME};
            GRANT VIEW ANY DEFINITION TO ${NR_CLI_DB_USERNAME};

            DECLARE @name SYSNAME
            DECLARE db_cursor CURSOR 
            READ_ONLY FORWARD_ONLY
            FOR
            SELECT NAME
            FROM master.sys.databases
            WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution')
            OPEN db_cursor
            FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0
            BEGIN
                EXECUTE('USE "' + @name + '"; CREATE USER ${NR_CLI_DB_USERNAME} FOR LOGIN ${NR_CLI_DB_USERNAME};' );
                FETCH next FROM db_cursor INTO @name
            END
            CLOSE db_cursor
            DEALLOCATE db_cursor

            select name from sys.syslogins where name = ${NR_CLI_DB_USERNAME}
            "@ 2>&1);

            Add-Content -Path "{{.NEW_RELIC_CLI_LOG_FILE_PATH}}" -Value @"SqlOutput`:` ${SqlOutput}\n"@ -Force | Out-Null;

            If ($SqlOutput.Length -ge 3) {
              $userName = $SqlOutput[2]
              $userName = $SqlOutput[2]; $userName = $userName.Trim();
              If ($userName -eq ${NR_CLI_DB_USERNAME}) {
                # User created successfully
                return true
              }
            }
            return false
          }

          $setupCount = 0

          # Create user for all DBs
          $instances = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server').InstalledInstances
          foreach ($instance in $instances) {

            $connection = "${NR_CLI_DB_HOSTNAME}\${instance},${NR_CLI_DB_PORT}"
            $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME as 'Name'" -l 1 2>&1)
            If ($name.Length -ge 3) {
              $actualName = $name[2]; $actualName = $actualName.Trim();
              If ($actualName -eq $instance) {
                # Was able to connect with port
                @isCreated = (Create-SqlUser -InstanceName $instance -Port $NR_CLI_DB_PORT)
                if (@isCreated) {
                  Write-OhiConfig -InstanceName $instance -Port $NR_CLI_DB_PORT
                  $setupCount++
                }
                continue
              }
            }

            $connection = "${NR_CLI_DB_HOSTNAME}\${instance}"
            $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME as 'Name'" -l 1 2>&1)
            If ($name.Length -ge 3) {
              $actualName = $name[2]; $actualName = $actualName.Trim();
              If ($actualName -eq $instance) {
                # Was able to connect with instance name
                @isCreated = (Create-SqlUser -InstanceName $instance)
                if (@isCreated) {
                  Write-OhiConfig -InstanceName $instance
                  $setupCount++
                }
                continue
              }
            }
          }

          if ($setupCount -eq 0) {
            Write-Host "No instances were found to instrument"
            Exit 131
          }

          #Remove previous versions
          function Find-UninstallGuids {
            param (
              [Parameter(Mandatory)]
              [string]$Match
            )

            $baseKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $wowKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $allKeys = $baseKeys + $wowKeys

            $uninstallIds = New-Object System.Collections.ArrayList
            foreach ($key in $allKeys) {
              $keyData = Get-Item -Path HKLM:\$key
              $name = $keyData.GetValue("DisplayName")
              if ($name -and $name -match $Match) {
                $keyId = Split-Path $key -Leaf
                $uninstallIds.Add($keyId) | Out-Null
              }
            }

            if ($uninstallIds.Count -eq 0) {
              return @()
            }

            return $uninstallIds
          }

          $uninstallIds = Find-UninstallGuids -Match "nri-mssql"
          foreach ($uninstallId in $uninstallIds) {
            $uninstallCommand = "msiexec /x """ + $uninstallId + """ /qn"
            Invoke-Expression $uninstallCommand
            # wait here to allow uninstall command to complete since it returns without waiting
            Start-Sleep -s 15
          }

          # Installing MSSql Integration
          (New-Object System.Net.WebClient).DownloadFile("http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi", "$env:TEMP\nri-mssql-amd64.msi");
          msiexec.exe /qn /i "$env:TEMP\nri-mssql-amd64.msi" | Out-Null;

          Restart-Service newrelic-infra
          '

postInstall:
  info: |2
      ⚙️  The Microsoft SQL Server configuration file can be found in C:\Program Files\New Relic\newrelic-infra\integrations.d\mssql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration#config
