name: aws-integration
displayName: AWS Integration
description: New Relic install recipe for AWS
repository: https://github.com/newrelic/newrelic-cli

installTargets:
  - type: host
    os: linux

keywords:
  - Ec2
  - Elastic
  - Compute
  - Aws
  - Cloud
  - Linux

processMatch: []

preInstall:
  requireAtDiscovery: |
      code=$(curl -I http://169.254.169.254/latest/meta-data/instance-id -w %{response_code} -so '/dev/null')

      if [ $code != "200" ]; then
        exit 1
      fi

      if [ ! -f ~/.aws/credentials ]; then
        exit 1
      fi

      if [ ! -f ~/.aws/config ]; then
        exit 1
      fi

      if ! command -v aws &> /dev/null; then
        exit 1
      fi

      callerIdentity=$(aws sts get-caller-identity 2>&1)

      if [ "$(echo "$callerIdentity" | grep AccessDenied | wc -l)" -eq "1" ] ; then
        exit 1
      fi

      username=$(echo "$callerIdentity" | sed -ne 's/.*"Arn": ".*\/\(.*\)".*/\1/p')

      echo "username: $username"

      userPolicies=$(aws iam list-user-policies --user-name $username 2>&1)

      if [ "$(echo "$userPolicies" | grep AccessDenied | wc -l)" -eq "1" ] ; then
        exit 1
      fi

      attachedUserPolicies=$(aws iam list-attached-user-policies --user-name $username 2>&1)

      if [ "$(echo "$attachedUserPolicies" | grep AccessDenied | wc -l)" -eq "1" ] ; then
        exit 1
      fi

      if [ "$(echo "$attachedUserPolicies" | grep AdministratorAccess | wc -l)" ]; then
        exit 0
      fi

      groups=$(aws iam list-groups-for-user --user-name $username 2>&1)

      # For each group in groups
      listOfGroups=$(echo "$groups" | sed -n 's/.*:group\/\(.*\)",.*/\1/p')

      for i in $listOfGroups; do
        groupPolicies=$(aws iam list-group-policies --group-name $i 2>&1)

        if [ "$(echo "$groupPolicies" | grep AccessDenied | wc -l)" -eq "1" ] ; then
          exit 1
        fi

        attachedGroupPolicies=$(aws iam list-attached-group-policies --group-name $i 2>&1)

        if [ "$(echo "$attachedGroupPolicies" | grep AccessDenied | wc -l)" -eq "1" ] ; then
          exit 1
        fi

        if [ "$(echo "$attachedGroupPolicies" | grep AdministratorAccess | wc -l)" ]; then
          exit 0
        fi

        groupPolicies=$(aws iam list-group-policies --group-name $i 2>&1)

        if [ "$(echo "$groupPolicies" | grep AccessDenied | wc -l)" -eq "1" ] ; then
          exit 1
        fi

        attachedGroupPolicies=$(aws iam list-attached-group-policies --group-name $i 2>&1)

        if [ "$(echo "$attachedGroupPolicies" | grep AccessDenied | wc -l)" -eq "1" ] ; then
          exit 1
        fi

        if [ "$(echo "$groupPolicies" | grep AdministratorAccess | wc -l)" -eq "1" ] ; then
          exit 0
        fi

        if [ "$(echo "$attachedGroupPolicies" | grep AdministratorAccess | wc -l)" -eq "1" ] ; then
          exit 0
        fi
      done

      exit 1
  info: |2
      Amazon integrations let you monitor your AWS data in several New Relic features.

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: setup

    assert_pre_req:
      cmds:
        - |
          # Constants
          roleName="NewRelicInfrastructure-Integrations"

          policy=$(cat <<EOT
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "",
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": "arn:aws:iam::754728514883:root"
                      },
                      "Action": "sts:AssumeRole",
                      "Condition": {
                          "StringEquals": {
                              "sts:ExternalId": "{{.NEW_RELIC_ACCOUNT_ID}}"
                          }
                      }
                  }
              ]
          }
          EOT
          )

          createRole=$(aws iam create-role --role-name $roleName --assume-role-policy-document file://<(echo $policy) 2>&1)

          getRole=$(aws iam get-role --role-name $roleName 2>&1)

          if [ "$(echo "$getRole" | grep "^An error occurred (NoSuchEntity)*" | wc -l)" -eq "1" ] ; then
              echo "$createRole" >&2
              exit 1
          fi

          aws iam attach-role-policy --role-name $roleName --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess

          policy=$(cat <<EOT
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                  "Effect": "Allow",
                  "Action": [
                      "budgets:ViewBudget"
                  ],
                  "Resource": "*"
                  }
              ]
          }
          EOT
          )

          aws iam put-role-policy --role-name $roleName --policy-name NewRelicBudget --policy-document file://<(echo $policy)

    setup:
      cmds:
        - |
          # Constants
          roleName="NewRelicInfrastructure-Integrations"

          callerIdentity=$(aws sts get-caller-identity 2>&1)
          accountName=$(echo "$callerIdentity" | sed -ne 's/.*Account": "\(.*\)",/\1/p')

          # Download and fix CloudFormation template
          curl -sLo /tmp/MetricStreams_CloudFormation.yml {{.NEW_RELIC_DOWNLOAD_URL}}cloud_integrations/aws/cloudformation/MetricStreams_CloudFormation.yml
          sed -ie "s/AWS::AccountId,/\'AWS::AccountId\',/g" /tmp/MetricStreams_CloudFormation.yml

          printf "\nDeploying CloudFormation template, this may take a few minutes...\n"
          deploy=$(aws cloudformation deploy --template-file /tmp/MetricStreams_CloudFormation.yml --stack-name NewRelic-Metric-Stream --parameter-overrides NewRelicLicenseKey={{.NEW_RELIC_LICENSE_KEY}} --capabilities CAPABILITY_NAMED_IAM 2>&1)

          if [ "$(echo "$deploy" | grep "^An error occurred (AlreadyExistsException)*" | wc -l)" -eq "1" ] ; then
              echo "CloudFormation stack already exists"
              exit 0
          fi

          if [ "$(echo "$deploy" | grep "^An error occurred (InvalidChangeSetStatus)*" | wc -l)" -eq "1" ] ; then
              echo "CloudFormation stack is already being deployed"
              exit 0
          fi

          if [ "$(echo "$deploy" | grep "*CREATE_IN_PROGRESS*" | wc -l)" -eq "1" ] ; then
              echo "CloudFormation stack is already being deployed"
              exit 0
          fi

          echo "CloudFormation deployment complete"

          rm /tmp/MetricStreams_CloudFormation.yml

          getRole=$(aws iam get-role --role-name $roleName 2>&1)
          arn=$(echo $getRole | sed -ne 's/.*"Arn": "\(.*\)".*/\1/p')

          query=$(echo { \"query\": \"mutation { cloudLinkAccount\(accountId: {{.NEW_RELIC_ACCOUNT_ID}}, accounts: { aws: { name: \\\"$accountName\\\", arn: \\\"$arn\\\", metricCollectionMode: PUSH}}\) { linkedAccounts { id name authLabel createdAt updatedAt } } }\" })

          curlQuery=$(echo $query | curl https://api.newrelic.com/graphql \
          -H 'Content-Type: application/json' \
          -H 'API-Key: {{.NEW_RELIC_API_KEY}}' \
          -d @- 2>&1)

          echo "Your AWS and New Relic accounts are linked"

postInstall:
  info: |2
      ⚙️  The AWS integration has been installed.
      See the docs:
      https://docs.newrelic.com/docs/integrations/amazon-integrations/aws-integrations-list/aws-metric-stream/
