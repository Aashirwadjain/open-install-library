name: alerts-golden-signal
displayName: Golden Signal Alerts
description: New Relic install recipe for golden signal alerts
repository: https://github.com/newrelic/newrelic-cli

installTargets:
  - type: host
    os: linux

keywords:
  - Alerts
  - Golden

processMatch: []

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: setup

    setup:
      cmds:
        - |
          NEW_RELIC_API_URL=$(echo -n 'https://api.newrelic.com')
          NEW_RELIC_INFRA_API_URL=$(echo -n 'https://infra-api.newrelic.com')
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
            NEW_RELIC_API_URL=$(echo -n 'https://staging-api.newrelic.com')
            NEW_RELIC_INFRA_API_URL=$(echo -n 'https://staging-infra-api.newrelic.com')
          fi
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i eu | wc -l) -gt 0 ]; then
            NEW_RELIC_API_URL=$(echo -n 'https://api.eu.newrelic.com')
            NEW_RELIC_INFRA_API_URL=$(echo -n 'https://infra-api.eu.newrelic.com')
          fi
          echo 'NEW_RELIC_API_URL:'$NEW_RELIC_API_URL
          echo 'NEW_RELIC_INFRA_API_URL:'$NEW_RELIC_INFRA_API_URL


          NEW_RELIC_ALERT_POLICY_URL=$(echo -n $NEW_RELIC_API_URL'/v2/alerts_policies.json')
          echo $NEW_RELIC_ALERT_POLICY_URL

          POLICY_RESULT=$(curl -sX GET $NEW_RELIC_ALERT_POLICY_URL \
              -H 'Api-Key:{{.NEW_RELIC_API_KEY}}' -H 'Auth-Type:User-Api-Key' \
              -H 'Content-Type: application/json'
          )
          echo 'POLICY_RESULT:'$POLICY_RESULT

          POLICY_ID=$(echo $POLICY_RESULT | ./newrelic utils jq '.policies[] | select(.name=="{{.ALERT_POLICY_NAME}}") | .id')
          if [ -n "$POLICY_ID" ] && [ $POLICY_ID -gt 0 ] ; then
            echo 'Alert policy found for {{.ALERT_POLICY_NAME}} name POLICY_ID:'$POLICY_ID
          else
            echo 'No existing alert policy {{.ALERT_POLICY_NAME}} found, creating alert policy {{.ALERT_POLICY_NAME}}'
            if [ -f policy.json ]; then
              rm -f policy.json
            fi
            sudo tee -a policy.json > /dev/null <<"EOT"
          {
            "policy": {
              "incident_preference": "PER_POLICY",
              "name": "ALERT_POLICY_NAME"
            }
          }
          EOT
            sed -i 's/ALERT_POLICY_NAME/{{.ALERT_POLICY_NAME}}/g' policy.json
            curl -X POST $NEW_RELIC_ALERT_POLICY_URL \
                -H 'Api-Key:{{.NEW_RELIC_API_KEY}}' -H 'Auth-Type:User-Api-Key' \
                -H 'Content-Type: application/json' \
                -L -d @policy.json
            POLICY_RESULT=$(curl -sX GET $NEW_RELIC_ALERT_POLICY_URL \
                -H 'Api-Key:{{.NEW_RELIC_API_KEY}}' -H 'Auth-Type:User-Api-Key' \
                -H 'Content-Type: application/json'
            )
            echo 'POLICY_RESULT:'$POLICY_RESULT

            POLICY_ID=$(echo $POLICY_RESULT | ./newrelic utils jq '.policies[] | select(.name=="{{.ALERT_POLICY_NAME}}") | .id')
            if [ -n "$POLICY_ID" ] && [ $POLICY_ID -gt 0 ] ; then
              echo 'Alert policy found for {{.ALERT_POLICY_NAME}} name POLICY_ID:'$POLICY_ID
            else
              echo 'Could not create a new alert policy for {{.ALERT_POLICY_NAME}} got POLICY_ID:'$POLICY_ID >> /dev/stderr
              exit 10
            fi
          fi


          if [ -f conditionsSearch.json ]; then
            rm -f conditionsSearch.json
          fi
          sudo tee -a conditionsSearch.json > /dev/null <<"EOT"
          {
            "query": "{actor {account(id: {{.NEW_RELIC_ACCOUNT_ID}}) {alerts {nrqlConditionsSearch {totalCount nrqlConditions { description name id enabled expiration { closeViolationsOnExpiration expirationDuration openViolationOnExpiration } nrql { query } policyId runbookUrl signal { aggregationWindow fillOption evaluationOffset fillValue } terms { operator priority threshold thresholdDuration thresholdOccurrences } type violationTimeLimitSeconds ... on AlertsNrqlBaselineCondition { id name nrql { query } baselineDirection description enabled expiration { closeViolationsOnExpiration expirationDuration openViolationOnExpiration } policyId runbookUrl signal { aggregationWindow evaluationOffset fillOption fillValue } terms { operator priority threshold thresholdDuration thresholdOccurrences } type violationTimeLimitSeconds } } } } } } }"
          }
          EOT
          CONDITIONS_LOOKUP_RESULT=$(curl -sX POST $NEW_RELIC_API_URL'/graphql' \
              -H 'Api-Key:{{.NEW_RELIC_API_KEY}}' \
              -L -H 'Content-Type: application/json' \
              -d @conditionsSearch.json
          )
          echo 'CONDITIONS_LOOKUP_RESULT:'$CONDITIONS_LOOKUP_RESULT


          HIGH_CPU_CONDITION_ID=$(echo $CONDITIONS_LOOKUP_RESULT | ./newrelic utils jq '.data.actor.account.alerts.nrqlConditionsSearch.nrqlConditions[] | select(.name=="{{.ALERT_HIGH_CPU_CONDITION_NAME}}") | .id | tonumber')
          echo 'HIGH_CPU_CONDITION_ID:'$HIGH_CPU_CONDITION_ID
          if [ -f condition.json ]; then
            rm -f condition.json
          fi
          if [ -n "$HIGH_CPU_CONDITION_ID" ] && [ $HIGH_CPU_CONDITION_ID -gt 0 ] ; then
            sudo tee -a condition.json > /dev/null <<"EOT"
          {
            "query": "mutation {alertsNrqlConditionStaticUpdate(accountId: {{.NEW_RELIC_ACCOUNT_ID}}, id: CONDITION_ID, condition: { name: CONDITION_NAME enabled: true nrql: { query: NRQL_QUERY } signal: { aggregationWindow: 60 evaluationOffset: 3 } terms: { threshold: 85 thresholdDuration: 300 thresholdOccurrences: ALL operator: ABOVE priority: CRITICAL } violationTimeLimitSeconds: 2592000 valueFunction: SINGLE_VALUE }) { id name } }"
          }
          EOT
          else
            sudo tee -a condition.json > /dev/null <<"EOT"
          {
            "query": "mutation {alertsNrqlConditionStaticCreate(accountId: {{.NEW_RELIC_ACCOUNT_ID}}, policyId: POLICY_ID, condition: { name: CONDITION_NAME enabled: true nrql: { query: NRQL_QUERY } signal: { aggregationWindow: 60 evaluationOffset: 3 } terms: { threshold: 85 thresholdDuration: 300 thresholdOccurrences: ALL operator: ABOVE priority: CRITICAL } violationTimeLimitSeconds: 2592000 valueFunction: SINGLE_VALUE }) { id name } }"
          }
          EOT
          fi
          sed -i 's/POLICY_ID/'$POLICY_ID'/g' condition.json
          sed -i "s/CONDITION_NAME/\"\"{{.ALERT_HIGH_CPU_CONDITION_NAME}}\"\"/g" condition.json
          sed -i "s/CONDITION_ID/\"\"$HIGH_CPU_CONDITION_ID\"\"/g" condition.json
          sed -i "s/NRQL_QUERY/\"\"SELECT average(\`host.cpuPercent\`) FROM Metric FACET entity.guid, host.hostname\"\"/g" condition.json
          sed -i 's/""/\\"/g' condition.json
          CONDITIONS_RESULT=$(curl -sX POST $NEW_RELIC_API_URL'/graphql' \
              -H 'Api-Key:{{.NEW_RELIC_API_KEY}}' \
              -L -H 'Content-Type: application/json' \
              -d @condition.json
          )
          echo 'CONDITIONS_RESULT:'$CONDITIONS_RESULT


          HIGH_ERROR_CONDITION_ID=$(echo $CONDITIONS_LOOKUP_RESULT | ./newrelic utils jq '.data.actor.account.alerts.nrqlConditionsSearch.nrqlConditions[] | select(.name=="{{.ALERT_HIGH_ERROR_RATE_NAME}}") | .id | tonumber')
          echo 'HIGH_ERROR_CONDITION_ID:'$HIGH_ERROR_CONDITION_ID
          if [ -f condition.json ]; then
            rm -f condition.json
          fi
          if [ -n "$HIGH_ERROR_CONDITION_ID" ] && [ $HIGH_ERROR_CONDITION_ID -gt 0 ] ; then
            sudo tee -a condition.json > /dev/null <<"EOT"
          {
            "query": "mutation {alertsNrqlConditionBaselineUpdate(accountId: {{.NEW_RELIC_ACCOUNT_ID}}, id: CONDITION_ID, condition: { name: CONDITION_NAME enabled: true nrql: { query: NRQL_QUERY } signal: { aggregationWindow: 60 evaluationOffset: 3 } terms: { threshold: 3 thresholdDuration: 300 thresholdOccurrences: ALL operator: ABOVE priority: CRITICAL } violationTimeLimitSeconds: 2592000 baselineDirection: UPPER_ONLY }) { id name } }"
          }
          EOT
          else
            sudo tee -a condition.json > /dev/null <<"EOT"
          {
            "query": "mutation {alertsNrqlConditionBaselineCreate(accountId: {{.NEW_RELIC_ACCOUNT_ID}}, policyId: POLICY_ID, condition: { name: CONDITION_NAME enabled: true nrql: { query: NRQL_QUERY } signal: { aggregationWindow: 60 evaluationOffset: 3 } terms: { threshold: 3 thresholdDuration: 300 thresholdOccurrences: ALL operator: ABOVE priority: CRITICAL } violationTimeLimitSeconds: 2592000 baselineDirection: UPPER_ONLY }) { id name } }"
          }
          EOT
          fi
          sed -i 's/POLICY_ID/'$POLICY_ID'/g' condition.json
          sed -i "s/CONDITION_NAME/\"\"{{.ALERT_HIGH_ERROR_RATE_NAME}}\"\"/g" condition.json
          sed -i "s/CONDITION_ID/\"\"$HIGH_ERROR_CONDITION_ID\"\"/g" condition.json
          sed -i "s/NRQL_QUERY/\"\"FROM Metric SELECT count(apm.service.error.count) \/ count(apm.service.transaction.duration) as 'Error Rate' WHERE appName LIKE '%' FACET entity.guid, appName\"\"/g" condition.json
          sed -i 's/""/\\"/g' condition.json
          CONDITIONS_RESULT=$(curl -sX POST $NEW_RELIC_API_URL'/graphql' \
              -H 'Api-Key:{{.NEW_RELIC_API_KEY}}' \
              -L -H 'Content-Type: application/json' \
              -d @condition.json
          )
          echo 'CONDITIONS_RESULT:'$CONDITIONS_RESULT


          HIGH_RESPONSE_CONDITION_ID=$(echo $CONDITIONS_LOOKUP_RESULT | ./newrelic utils jq '.data.actor.account.alerts.nrqlConditionsSearch.nrqlConditions[] | select(.name=="{{.ALERT_HIGH_RESPONSE_TIME_NAME}}") | .id | tonumber')
          echo 'HIGH_RESPONSE_CONDITION_ID:'$HIGH_RESPONSE_CONDITION_ID
          if [ -f condition.json ]; then
            rm -f condition.json
          fi
          if [ -n "$HIGH_RESPONSE_CONDITION_ID" ] && [ $HIGH_RESPONSE_CONDITION_ID -gt 0 ] ; then
            sudo tee -a condition.json > /dev/null <<"EOT"
          {
            "query": "mutation {alertsNrqlConditionBaselineUpdate(accountId: {{.NEW_RELIC_ACCOUNT_ID}}, id: CONDITION_ID, condition: { name: CONDITION_NAME enabled: true nrql: { query: NRQL_QUERY } signal: { aggregationWindow: 60 evaluationOffset: 3 } terms: { threshold: 3 thresholdDuration: 300 thresholdOccurrences: ALL operator: ABOVE priority: CRITICAL } violationTimeLimitSeconds: 2592000 baselineDirection: UPPER_ONLY }) { id name } }"
          }
          EOT
          else
            sudo tee -a condition.json > /dev/null <<"EOT"
          {
            "query": "mutation {alertsNrqlConditionBaselineCreate(accountId: {{.NEW_RELIC_ACCOUNT_ID}}, policyId: POLICY_ID, condition: { name: CONDITION_NAME enabled: true nrql: { query: NRQL_QUERY } signal: { aggregationWindow: 60 evaluationOffset: 3 } terms: { threshold: 3 thresholdDuration: 300 thresholdOccurrences: ALL operator: ABOVE priority: CRITICAL } violationTimeLimitSeconds: 2592000 baselineDirection: UPPER_ONLY }) { id name } }"
          }
          EOT
          fi
          sed -i 's/POLICY_ID/'$POLICY_ID'/g' condition.json
          sed -i "s/CONDITION_NAME/\"\"{{.ALERT_HIGH_RESPONSE_TIME_NAME}}\"\"/g" condition.json
          sed -i "s/CONDITION_ID/\"\"$HIGH_RESPONSE_CONDITION_ID\"\"/g" condition.json
          sed -i "s/NRQL_QUERY/\"\"SELECT average(newrelic.goldenmetrics.apm.application.responseTimeMs) FROM Metric FACET entity.guid, appName\"\"/g" condition.json
          sed -i 's/""/\\"/g' condition.json
          CONDITIONS_RESULT=$(curl -sX POST $NEW_RELIC_API_URL'/graphql' \
              -H 'Api-Key:{{.NEW_RELIC_API_KEY}}' \
              -L -H 'Content-Type: application/json' \
              -d @condition.json
          )
          echo 'CONDITIONS_RESULT:'$CONDITIONS_RESULT


      vars:
        ALERT_POLICY_NAME:
          sh: echo 'Golden Signals'
        ALERT_HIGH_CPU_CONDITION_NAME:
          sh: echo 'High CPU'
        ALERT_HIGH_ERROR_RATE_NAME:
          sh: echo 'High Application Error percentage'
        ALERT_HIGH_RESPONSE_TIME_NAME:
          sh: echo 'High Application Response Time'
        ALERT_LOW_THROUGHPUT_NAME:
          sh: echo 'Low Application Throughput'

