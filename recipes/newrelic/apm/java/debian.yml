# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: java-agent-installer
displayName: Java Agent Installer
description: New Relic install recipe for instrumenting Java applications
repository: https://github.com/newrelic/newrelic-java-agent

installTargets:
  - type: application
    os: linux
    platform: "debian"
  - type: application
    os: linux
    platform: "ubuntu"

keywords:
  - java

processMatch:
  - java

validationNrql: "SELECT count(*) from Transaction WHERE host like '{{.HOSTNAME}}%' facet entityGuid since 10 minutes ago"

successLinkConfig:
  type: EXPLORER
  filter: '"`tags.language` = ''java''"'

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: setup
        - task: install_agent

    setup:
      label: "Installing Java Introspector..."
      cmds:
        - |
          curl -s -O https://open-install-library-artifacts.s3-us-west-2.amazonaws.com/linux/java/nri-introspector-java_0.1.0~SNAPSHOT-1_amd64.deb
        - |
          sudo apt install -y -q ./nri-introspector-java_0.1.0~SNAPSHOT-1_amd64.deb 2> /dev/null || true

    install_agent:
      label: "Finding Java processes and installing Java agent"
      cmds:
        - |
          assumeYes() {
            echo "{{.NEW_RELIC_ASSUME_YES}}"
          }

          testMode() {
            echo "{{.NEW_RELIC_TEST_MODE}}"
          }

          findServerType () {
            local mainClass=$( echo "$1" | grep -oP '.*\K(?<=mainClass":").*?(?=\")' )
            if [[ "$mainClass" == "org.apache.catalina.startup.Bootstrap" ]]; then
              echo "tomcat"
              # other server type checks should be added here in else if statements
            else
              echo "unkown"
            fi
            return 0
          }

          # requires that a variable appName exists and will update it
          promptAppName() {
            local default=$1
            echo -n "Enter an app name (default: $default): "
            read -r appName
            if [[ -z "$appName" ]]; then
              appName=$default
            fi
          }

          promptProceed() {
            echo -n "Proceed (Y/n): "
            read -r answer
            if [[ -n "$answer" ]] && [[ "${answer::1}" != "Y" ]] && [[ "${answer::1}" != "y" ]]; then
              return $(false)
            fi
            return $(true)
          }

          systemd_restart_service() {
            local pid=$1
            local service=$(systemctl status $pid | head -n1 | grep -oP "(?<=. )\K\w+(?=\.service)")
            if [ -z "$service" ]; then
              echo "service not found"
              return 1;
            else
              if [[ $(assumeYes) != "true" ]]; then
                echo "The installation needs to restart the systemd service $service to complete the process."
                promptProceed
                if [[ $? -gt 0 ]]; then
                  echo "You need to restart the service to complete the installation."
                  return 130
                fi
              fi
              if [[ $(testMode) != "true" ]]; then
                systemctl restart ${service}
              fi
              return 0;
            fi
          }

          tomcat_restart_standalone() {
            local pid=$1
            local catalinaBase=$2
            local workDir=$3
            local catalinaHome=$(cat /proc/$pid/cmdline | xargs -0 | grep -oP "(?<=catalina\.home=)\K[\.\w/]+")
            catalinaHome=$(cd $workDir; realpath $catalinaHome)
            local jreHome=$(cat /proc/$pid/cmdline | xargs -0 | grep -oP "\K.*(?=/bin/java )")
            local user=`ps -q $pid -h -o user`

            if [[ $(assumeYes) != "true" ]]; then
              echo "The installation needs to restart the Tomcat server."
              echo "A SIGTERM will be sent to Tomcat and it will then be restarted with:"
              echo "sudo -u $user JRE_HOME=$jreHome CATALINA_BASE=$catalinaBase $catalinaHome/bin/catalina.sh start"
              promptProceed
              if [[ $? -gt 0 ]]; then
                echo "You need to restart the service to complete the installation."
                return 130
              fi
            fi

            if [[ $(testMode) != "true" ]]; then
              kill -15 $pid
              echo "need to wait until process is really dead. For now it will sleep for 5 seconds"
              sleep 5
              sudo -u $user JRE_HOME=$jreHome CATALINA_BASE=$catalinaBase $catalinaHome/bin/catalina.sh start > /dev/null
            fi
          }

          tomcat() {
            local pid=$1
            local initSystem=$2
            local workDir=$(readlink /proc/$pid/cwd)
            local catalinaBase=$(cat /proc/$pid/cmdline | xargs -0 | grep -oP "(?<=catalina\.base=)\K[\.\w/]+")
            catalinaBase=$(cd $workDir; realpath $catalinaBase)
            local appName="{{.HOSTNAME}}"

            if [[ -n "$NEW_RELIC_APP_NAME" ]]; then
              appName="$NEW_RELIC_APP_NAME"
            else
              if [[ $(assumeYes) != "true" ]]; then
                echo ""
                echo "This is the CATALINA_BASE of the service being instrumented: $catalinaBase"
                promptAppName $appName
              fi
            fi

            [[ "$initSystem" == "systemd" ]] && systemd_restart_service $pid || tomcat_restart_standalone $pid $catalinaBase $workDir
          }

          dynamicAttach() {
            local pid=$1
            echo "starting dynamicAttach to process $pid"
          }

          INIT_SYSTEM=`cat /proc/1/status | grep -oP 'Name:\s+\K\w+'`
          FOUND_JAVA_PROCESSES=$(nri-lsi-java -list)
          if [ "$FOUND_JAVA_PROCESSES" == "" ] ||  [ "$FOUND_JAVA_PROCESSES" == "[  ]" ]; then
            echo "No Java processes found running on the host" >> /dev/stderr
            exit 3
          fi

          JAVA_PROCESSES=$(echo "$FOUND_JAVA_PROCESSES" | sed -e "s/\[ //" | sed -e "s/ \]//" | sed "s/,/\n/g")
          for JAVA_PID in "${JAVA_PROCESSES[@]}"
          do
            INTROSPECTION_DATA=$( nri-lsi-java -introspect ${JAVA_PID} )
            SERVER_TYPE=$( findServerType $INTROSPECTION_DATA )

            case $SERVER_TYPE in
            "tomcat")
              tomcat $JAVA_PID $INIT_SYSTEM
              ;;
            *)
              dynamicAttach $JAVA_PID
              ;;
            esac
          done
