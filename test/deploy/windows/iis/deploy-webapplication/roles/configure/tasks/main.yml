---
# This play installs on IIS either a traditional asp.net web application
# Or installs an asp.net core web application. For core web application, the application must be packaged as "self-contained" (single zip with everything compiled for the target os platform)

- name: Set default is_core_app (default to false)
  set_fact:
    is_core_app: "false"
  when: is_core_app is undefined

- block:
  - name: Set var for .net apps
    set_fact:
      web_app_pool_version = "v4.0"
    when: web_app_pool_version is undefined
  - name: Set default web_app_url
    set_fact:
      web_app_url = "https://open-install-library-artifacts.s3-us-west-2.amazonaws.com/windows/aspnet/WebApplication.zip"
    when: web_app_url is undefined
  when: (is_core_app|bool) == False

- block:
  - name: Set var for .net Core apps
    set_fact:
      web_app_pool_version = ""
    when: web_app_pool_version is undefined
  - name: Set default web_app_url
    set_fact:
      web_app_url = "https://open-install-library-artifacts.s3-us-west-2.amazonaws.com/windows/aspnet/CoreWebApplicationIis.zip"
    when: web_app_url is undefined
  when: is_core_app|bool

- name: Remove Default Web Site
  win_shell: |
    Import-Module WebAdministration
    $iisWebsiteName = "Default Web Site"
    if (Test-Path IIS:\Sites\$iisWebsiteName -pathType container)
    {
    Remove-WebSite -Name $iisWebsiteName
    }

- name: Remove WebApplication {{ service_id }} Web Site
  win_shell: |
    Import-Module WebAdministration
    $iisWebsiteName = "{{ service_id }}"
    if (Test-Path IIS:\Sites\$iisWebsiteName -pathType container)
    {
    Remove-WebSite -Name $iisWebsiteName
    }

- name: Download WebApplication {{ service_id }}
  win_shell: |
    Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
    $url = "{{ web_app_url }}"
    $file = "$env:temp\WebApplication.zip"
    [Net.ServicePointManager]::SecurityProtocol = "tls12, tls"
    (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)
    Expand-Archive -LiteralPath $file -DestinationPath C:\inetpub\wwwroot\{{ service_id }}

- name: Install WebApplication web site
  win_shell: |
    Import-Module WebAdministration
    $iisAppPoolName = "{{ service_display_name }}"
    $iisAppPoolDotNetVersion = "{{ web_app_pool_version }}"
    $iisWebsiteFolderPath = "C:\inetpub\wwwroot\{{ service_id }}"
    $iisWebsiteName = "{{ service_id }}"
    $iisWebsiteBindings = @(
      @{protocol="http";bindingInformation="*:{{ service_port }}:"}
    )
    if (!(Test-Path IIS:\AppPools\$iisAppPoolName -pathType container))
    {
    New-Item IIS:\AppPools\$iisAppPoolName
    Set-ItemProperty IIS:\AppPools\$iisAppPoolName -name "managedRuntimeVersion" -value $iisAppPoolDotNetVersion
    }
    if (!(Test-Path IIS:\Sites\$iisWebsiteName -pathType container))
    {
    New-Item IIS:\Sites\$iisWebsiteName -bindings $iisWebsiteBindings -physicalPath $iisWebsiteFolderPath
    Set-ItemProperty IIS:\Sites\$iisWebsiteName -name applicationPool -value $iisAppPoolName
    }

- name: Ensure web.config for .net core app has hostingModel set to OutOfProcess
  win_shell: |
    (Get-Content C:\inetpub\wwwroot\{{ service_id }}\web.config).replace('hostingModel="inprocess"', 'hostingModel="OutOfProcess"') | Set-Content C:\inetpub\wwwroot\{{ service_id }}\web.config
  when: is_core_app|bool

- name: Open port {{ service_port }}
  win_shell: |
    netsh advfirewall firewall add rule name="Open Port {{ service_port }}" dir=in action=allow protocol=TCP localport={{ service_port }}
